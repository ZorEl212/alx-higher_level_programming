===============================
 Test Module 1-matrix-divided
===============================

Test the function ``matrix_divided()`` for correct outputs

Numbers
=======

``matrix_divided()`` returns a new list (matrix) containing divided value of each element in the orignal matrix.
All elements of the orignal matrix must be integers or floats

For datatypes other than ``int`` it should raise TypeError.

Each row of the matrix must be the same size otherwise raise TypeError.

The dividing constant must be a number, otherwise rasie TypeError, and it can't be equal to zero.
or if it is raise ZeroDivisionError.



Import the function
    >>> matrix_divided = __import__("1-matrix_divided").matrix_divided

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 333)
    [[0.0, 0.01, 0.01], [0.01, 0.02, 0.02]]

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 0) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    ZeroDivisionError

Check for invalid element in the matrix
    >>> matrix_divided([[1, 2, 3],[['alx'], 5, 6]], 33)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Check if the the matrix is correct data type (list) 
    >>> matrix_divided([[1,2,3], [4,5,6, 7]], 33) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    ValueError:
    
check negative values

    >>> matrix_divided([[-1, -2, -3],[4, 5, 6]], 333)
    [[-0.0, -0.01, -0.01], [0.01, 0.02, 0.02]]

check with extra large divisor
    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3333333333333333333333333333333333333333)
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

check with some large elements
    >>> matrix_divided([[1,2,float('inf')], [4,5,6, 7]], 33) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    OverflowError: