===============================
 Test Module 0-add_integer
===============================

Test the function ``add_integer()`` for correct outputs

Numbers
=======

``add_integer()`` returns the sum of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

For datatypes other than ``int`` it should raise TypeError.

Import the function
    >>> add_integer = __import__("0-add_integer").add_integer

Check for correct output incase of integers.
    >>> add_integer(6, 4)
    10

    >>> add_integer(0, 4)
    4

Check for value of default value for 'b' if no argumnt is passed for it
    >>> add_integer(4)
    102

Check for non integer type for 'a'
    >>> add_integer('a', 4) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>>

Check for non integer type for 'b'
    >>> add_integer(10, {40})
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Checking for the case with both non integer types.
It should rasie the exception error for a.
    >>> add_integer("Betty", [28])
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check for float numbers
    >>> add_integer(20.6, 55.6)
    75

check for big numbers
    >>> add_integer(199999999999999999999999999999999999999999, 1)
    200000000000000000000000000000000000000000
